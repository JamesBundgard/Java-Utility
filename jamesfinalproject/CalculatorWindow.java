/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jamesfinalproject;

import java.util.regex.Pattern;
import javax.swing.border.*;

/**
 *
 * @author James
 */
public class CalculatorWindow extends javax.swing.JFrame {

    public String prevAns = "";                                                 //Declares a public string to hold the previus answer
    public boolean operationChosen = false;                                     //Declares a public boolean variable to track whether or not the user has chosen an operation
    public boolean firstChar = true;                                            //Declares a public boolean variable to track whether or not the user has already pressed a button
    public String operation = "";                                               //Declares a publis string to hold the symbol of the chosen operation

    /**
     * Creates new form CalculatorWindow
     */
    
    public CalculatorWindow() {
        initComponents();                                                       //Initializes all the GUI components
        
            //The following code is used to set the border around the display text field
        
        Border border = display.getBorder();                                    //Gets the display's current border                
        Border margin = new EmptyBorder(10, 10, 10, 10);                        //Creates a new empty border to surround the display text
        display.setBorder(new CompoundBorder(border, margin));                  //Sets the display border to the current border and the empty border
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
        //The following is all computer generated code for the GUI
    
    @SuppressWarnings("unchecked") 
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        display = new javax.swing.JLabel();
        buttonSqurt = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();
        buttonExponent = new javax.swing.JButton();
        buttonPi = new javax.swing.JButton();
        buttonDivide = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button1 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        buttonMultiply = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        buttonPrevAns = new javax.swing.JButton();
        button0 = new javax.swing.JButton();
        buttonEquals = new javax.swing.JButton();
        buttonSub = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Calculator");

        display.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        display.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        display.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        buttonSqurt.setText("√");
        buttonSqurt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSqurtActionPerformed(evt);
            }
        });

        buttonClear.setText("CE");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        buttonExponent.setText("x^y");
        buttonExponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExponentActionPerformed(evt);
            }
        });

        buttonPi.setText("π");
        buttonPi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPiActionPerformed(evt);
            }
        });

        buttonDivide.setText("÷");
        buttonDivide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDivideActionPerformed(evt);
            }
        });

        button3.setText("3");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        button2.setText("2");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        button1.setText("1");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button6.setText("6");
        button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button6ActionPerformed(evt);
            }
        });

        button5.setText("5");
        button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button5ActionPerformed(evt);
            }
        });

        button4.setText("4");
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });

        buttonMultiply.setText("x");
        buttonMultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMultiplyActionPerformed(evt);
            }
        });

        button7.setText("7");
        button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button7ActionPerformed(evt);
            }
        });

        button8.setText("8");
        button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button8ActionPerformed(evt);
            }
        });

        button9.setText("9");
        button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button9ActionPerformed(evt);
            }
        });

        buttonAdd.setText("+");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonPrevAns.setText("ANS");
        buttonPrevAns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrevAnsActionPerformed(evt);
            }
        });

        button0.setText("0");
        button0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button0ActionPerformed(evt);
            }
        });

        buttonEquals.setText("=");
        buttonEquals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEqualsActionPerformed(evt);
            }
        });

        buttonSub.setText("-");
        buttonSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubActionPerformed(evt);
            }
        });

        buttonExit.setText("Back");
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonSqurt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(buttonExponent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonPi, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(buttonClear)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(button4, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                                    .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(7, 7, 7)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(button5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(button6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buttonMultiply, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buttonDivide, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(button7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonPrevAns, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(button0, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buttonEquals, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buttonSub, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addComponent(button8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(button9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonExit)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(buttonExit))
                .addGap(18, 18, 18)
                .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSqurt)
                    .addComponent(buttonExponent)
                    .addComponent(buttonPi)
                    .addComponent(buttonClear))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonDivide)
                    .addComponent(button3)
                    .addComponent(button2)
                    .addComponent(button1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonMultiply)
                    .addComponent(button6)
                    .addComponent(button5)
                    .addComponent(button4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button7)
                    .addComponent(button8)
                    .addComponent(button9)
                    .addComponent(buttonAdd))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonPrevAns)
                    .addComponent(button0)
                    .addComponent(buttonEquals)
                    .addComponent(buttonSub))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
    
    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "1");                               //Adds the character "1" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button1ActionPerformed

    
    
    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "2");                               //Adds the character "2" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button2ActionPerformed

    
    
    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "3");                               //Adds the character "3" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button3ActionPerformed

    
    
    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "4");                               //Adds the character "4" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button4ActionPerformed

    
    
    private void button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button5ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "5");                               //Adds the character "5" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button5ActionPerformed

    
    
    private void button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button6ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "6");                               //Adds the character "6" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button6ActionPerformed

    
    
    private void button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button7ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "7");                               //Adds the character "7" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button7ActionPerformed

    
    
    private void button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button8ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "8");                               //Adds the character "8" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button8ActionPerformed

    
    
    private void button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button9ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "9");                               //Adds the character "9" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button9ActionPerformed

    
    
    private void button0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button0ActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + "0");                               //Adds the character "0" to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_button0ActionPerformed

    
    
    
    
    
    private void buttonPrevAnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrevAnsActionPerformed
        // TODO add your handling code here:

        display.setText(display.getText() + prevAns);                           //Adds the previous answer to the display screen
        firstChar = false;                                                      //Indicates that the user has now entered a character

    }//GEN-LAST:event_buttonPrevAnsActionPerformed

    
    
    
    
    
    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        // TODO add your handling code here:

        display.setText("");                                                    //Resets the display text
        firstChar = true;                                                       //Resets the firstChar variable to true
        operationChosen = false;                                                //Resets the operationChosen variable to false
        operation = "";                                                         //Resets the operation string to empty

    }//GEN-LAST:event_buttonClearActionPerformed

    
    
    
    
    
    private void buttonSqurtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSqurtActionPerformed
        // TODO add your handling code here:
        
        if (!operationChosen) {                                                 //If no operation has been chosen:
            
            display.setText("√" + display.getText());                           //Adds the square root symbol to the display
            operationChosen = true;                                             //The user has now selected an operation
            operation = "√";                                                    //The operation is now square rooting
            
        }
    }//GEN-LAST:event_buttonSqurtActionPerformed

    
    
    private void buttonExponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExponentActionPerformed
        // TODO add your handling code here:
        
        if ((!operationChosen) && (!firstChar)) {                               //If no operation has been chosen:
            
            display.setText(display.getText() + "^");                           //Adds the exponent symbol to the display
            operationChosen = true;                                             //The user has now selected an operation
            operation = "^";                                                    //The operation is now exponentiation
            
        }
    }//GEN-LAST:event_buttonExponentActionPerformed

    
    
    
    
    
    private void buttonPiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPiActionPerformed
        // TODO add your handling code here:

        double pi = (Math.round(Math.PI * 1000000.00)) / 1000000.00;            //Calculates pi to six decimal places
        display.setText(display.getText() + String.valueOf(pi));                //Adds the value of pi to the display
        firstChar = false;                                                      //The user has now entered a character

    }//GEN-LAST:event_buttonPiActionPerformed

    
    
    
    
    
    private void buttonDivideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDivideActionPerformed
        // TODO add your handling code here:
        
        if ((!operationChosen) && (!firstChar)) {                               //If the user has entered a number and no other operation:
            
            display.setText(display.getText() + "÷");                           //Adds the division symbol to the display
            operationChosen = true;                                             //The user has now entered an operation
            operation = "÷";                                                    //The operation is division
            
        }
    }//GEN-LAST:event_buttonDivideActionPerformed

    
    
    private void buttonMultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMultiplyActionPerformed
        // TODO add your handling code here:
        
        if ((!operationChosen) && (!firstChar)) {                               //If the user has entered a number and no other operation:
            
            display.setText(display.getText() + "x");                           //Adds the multiplication symbol to the display
            operationChosen = true;                                             //The user has now entered an operation
            operation = "x";                                                    //The operation is multiplication
            
        }
    }//GEN-LAST:event_buttonMultiplyActionPerformed

    
    
    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // TODO add your handling code here:
        
        if ((!operationChosen) && (!firstChar)) {                               //If the user has entered a number and no other operation:
            
            display.setText(display.getText() + "+");                           //Adds the addition symbol to the display
            operationChosen = true;                                             //The user has now entered an operation
            operation = "+";                                                    //The operation is addition
            
        }
    }//GEN-LAST:event_buttonAddActionPerformed

    
    
    private void buttonSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubActionPerformed
        // TODO add your handling code here:

        if (firstChar){                                                         //If this is the first character:
            
            display.setText("-");                                               //Display the subtraction symbol
            
            
        } else if ((operationChosen)&&((display.getText().indexOf(operation))==(display.getText().length()-1))) {   //If an operation has been chosen, and is located at the right of the display:
            
            display.setText(display.getText() + "-");                           //Adds the subtraction symbol to the screen -> needed so the second number can be negative 
            
            
        } else if (!operationChosen){                                           //If an operation has not been chosen:
            
            display.setText(display.getText() + "-");                           //Adds the subtraction symbol to the display
            operationChosen = true;                                             //The user has now chosen the operation
            operation = "-";                                                    //The operation is subtraction
            
        }
    }//GEN-LAST:event_buttonSubActionPerformed

    
    
    
    
    
    private void buttonEqualsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEqualsActionPerformed
        // TODO add your handling code here:
        
        Double ans = 0.0;                                                       //Creates a variable to store the answer
        boolean error = false;                                                  //Creates a boolean variable to track whether or not an error occured
        
        if ((!operation.equals("√"))&&(operationChosen)){                       //If an operation has been chosen, but it is not the square root:
            
            String [] input = display.getText().split(Pattern.quote(operation));//Creates an array to store the text in the display, split around the operation
            
            Double num1 = Double.parseDouble(input[0]);                         //Converts the first number to a double, "num1"
            Double num2 = Double.parseDouble(input[1]);                         //Converts the first number to a double, "num2"
            
            switch (operation){                                                 //Preformes the correct operation, based on the value of the operation variable
                
                case "+":                                                       //Case 1: Addition
                    ans = num1 + num2;
                    break;
                    
                case "-":                                                       //Case 2: Subtraction
                    ans = num1 - num2;
                    break;
                    
                case "^":                                                       //Case 3: Exponentiation
                    ans = Math.pow(num1, num2);
                    break;
                    
                case "÷":                                                       //Case 4: Division
                    if (num2 == 0.0){                                           
                        error = true;                                           //If the second number is zero, it causes an error (you can't divide by zero)
                    }
                    ans = num1 / num2;
                    break;
                    
                case "x":                                                       //Case 5: Multiplication
                    ans = num1 * num2;
                    break;
                    
            }
            
        } else if (operation.equals("√")) {                                     //If the operation is the square root:
            
            Double num1 = Double.parseDouble(display.getText().replace("√", ""));   //Conerts the number in the display to a double, without the square root symbol
            int checkIndexNegative = String.valueOf(num1).indexOf("-");         //Gets the index of the negative sign
            
            if (checkIndexNegative > -1){                                       //If a negative sign is found:
                error = true;                                                   //An error will occur (can't square root a negative number)
                
            } else {
                ans = Math.sqrt(num1);                                          //Else: the answer is the square root of num1
            }
            
        } else{                                                                 //If no operation has been chosen:
            
            try {
                ans = Double.valueOf(display.getText());                        //Try to let the answer equal the display text as a double 
            } catch (NumberFormatException numberFormatException) {
                ans = 0.0;                                                      //If that fails, let the answer equal 0
            }
            
        }
        
        if (!error) {                                                           //If no error has occured:
            
            ans = (Math.round(ans * 1000000.00)) / 1000000.00;                  //Rounds the answer to six decimal places
            
            if (ans == Math.round(ans)) {                                       //If the answer equals the answer rounded to the nearest integer (the answer is an integer)
                
                int intAns = (int) Math.round(ans);                             //Converts the double answer to an integer 
                prevAns = String.valueOf(intAns);                               //Sets the previous answer varaible equal to this answer
                display.setText(String.valueOf(intAns));                        //Displays the answer on the display
                
            } else {                                                            //Else:
                
                prevAns = String.valueOf(ans);                                  //Sets the previous answer varaible equal to this answer
                display.setText(String.valueOf(ans));                           //Displays the answer on the display
                
            }
            
            firstChar = false;                                                  //Since the first character has already been displayed (the answer)
            operationChosen = false;                                            //Resets whether or not an operation has been chosen to false
            
        } else {
            
            display.setText("ERROR");                                           //Displays the message "ERROR" to the screen
            operationChosen = false;                                            //Resets whether or not an operation has been chosen to false
            
        }
        
    }//GEN-LAST:event_buttonEqualsActionPerformed

    
    
    
    
    
    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        // TODO add your handling code here:
        
        this.dispose();                                                         //Closes the current calculator window
        
    }//GEN-LAST:event_buttonExitActionPerformed

    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    
        //Computer generated variable names

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button0;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonDivide;
    private javax.swing.JButton buttonEquals;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonExponent;
    private javax.swing.JButton buttonMultiply;
    private javax.swing.JButton buttonPi;
    private javax.swing.JButton buttonPrevAns;
    private javax.swing.JButton buttonSqurt;
    private javax.swing.JButton buttonSub;
    private javax.swing.JLabel display;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
