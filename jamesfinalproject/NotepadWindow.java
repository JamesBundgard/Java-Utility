/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jamesfinalproject;

import java.io.*;
import java.math.BigInteger;
import java.text.*;
import java.util.Date;
import library.Library;

/**
 *
 * @author James
 */
public class NotepadWindow extends javax.swing.JFrame {

    /**
     * Creates new form NotepadWindow
     */
    public String fileName = "";

    public NotepadWindow() {
        
        initComponents();                                                       //Initializes the components
        
        boolean newUser;                                                        //Tracks whether or not the user is new to this feature
        String tempString = "";                                                 //Creates a temporary string
        char[] usernameChars = Library.username.toCharArray();                  //Converts the username to a character array

        for (int i = 0; i < Library.username.length(); i++) {
            tempString = tempString + (int) usernameChars[i];                   //Converts each charactrer in the username to an integer, then add it unto the temporary string
        }

        fileName = tempString + "n.txt";                                        //The temporary string plus "n.txt" gives the file name

        try {
            
            FileReader file = new FileReader(fileName);                         //Tries to read the file 
            newUser = false;                                                    //If it works, this is not a new user
            
        } catch (IOException e) {
            newUser = true;                                                     //If it doesn't, they are
        }

        if (!newUser) {                                                         //If this in not a new user:
            
            String[] info = Library.read(fileName);                             //Reads the file
            BigInteger[] timeCreated = new BigInteger[info.length / 3];         //Creates an array to store the times created
            String[] titles = new String[info.length / 3];                      //Creates an array to hold the notes' titles
            
            for (int i = 0; i < titles.length; i++) {                           //This code fills in the data to the correct arrays
                titles[i] = info[i * 3];
                timeCreated[i] = new BigInteger(info[(i * 3) + 2]);
            }

            Object[][] toSort = {titles, timeCreated};                          //Creates an array of the data to sort
            toSort = Library.sortHighToLow(toSort, 1);                          //Sorts the data by time created (recent to old)
            
            for (Object object : toSort[0]) {
                displaySaved.addItem(String.valueOf(object));                   //Displays the list of sorted titles in the drop down menu
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        displaySaved = new javax.swing.JComboBox<>();
        openButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        titleField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contentArea = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        errorText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Notepad");

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Title");

        jLabel3.setText("Body");

        contentArea.setColumns(20);
        contentArea.setRows(5);
        jScrollPane1.setViewportView(contentArea);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        errorText.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(displaySaved, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(openButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(errorText))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saveButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(displaySaved, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorText))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveButton)
                    .addComponent(backButton))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        
        DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");         //This code gets the current time in hours, minutes, and seconds, and converts it to a string 
        Date dateInput = new Date();
        String date = String.valueOf(dateFormat.format(dateInput));
        
        boolean titleExists = false;                                            //Tracks if a file with this name already exists 
        
        try{
            
            FileReader file = new FileReader(fileName);                         //Creates a new file reader
            String[] info = Library.read(fileName);                             //Reads the file
            String[] titles = new String[info.length / 3];                      //Creates an array to hold the notes' titles
            
            for (int i = 0; i < titles.length; i++) {
                titles[i] = info[i * 3];                                        //Places the titles in the file in the array
            }
            
            for (String title : titles) {
                if (title.equals(String.valueOf(titleField.getText()))) {       //Searches through the array
                    titleExists = true;                                         //If the title is already in the array, the title already exists
                }
            }
            
        } catch (FileNotFoundException ex) {
            titleExists = false;                                                //If the file doesn't exist, this title must be available to use
        }
        
        if (!titleExists) {                                                     //If the title does not exist:
            
            String[] newContent = {titleField.getText(), contentArea.getText(), date};  //Creates an array to hold the new data, retrieved from the text fields
            Library.write(fileName, newContent, true);                          //Writes this data to thte file
            
            NotepadWindow note = new NotepadWindow();                           //Creates a new notepad window
            note.setVisible(true);                                              //Makes it visible
            note.setLocationRelativeTo(null);                                   //Positions it in the screen's centre
            
            this.dispose();                                                     //Closes this window
            
        } else {
            errorText.setText("Title already exists");                          //If the title already exists, this error message is displayed
        }
        

    }//GEN-LAST:event_saveButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        // TODO add your handling code here:

        if (displaySaved.getSelectedItem() != null) {
            
            String[] info = Library.read(fileName);                             //Reads the file
            String[] contents = new String[info.length / 3];                    //Creates an array to hold the notes' titles
            String[] titles = new String[info.length / 3];                      //Creaes an array to hold the notes' contents
            
            for (int i = 0; i < titles.length; i++) {                           //Organises the data in the correct arrays
                titles[i] = info[i * 3];
                contents[i] = info[(i * 3) + 1];
            }
            
            for (int i = 0; i < titles.length; i++) {
                if (titles[i].equals(String.valueOf(displaySaved.getSelectedItem()))) { //Searches through the title arrays for the title selected
                    titleField.setText(titles[i]);                              //If found, displays the title in the title field
                    contentArea.setText(contents[i]);                           //Displays the content in the content area
                }
            }
            
        }

    }//GEN-LAST:event_openButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        
        this.dispose();                                                         //Closes this window
        
    }//GEN-LAST:event_backButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTextArea contentArea;
    private javax.swing.JComboBox<String> displaySaved;
    private javax.swing.JLabel errorText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField titleField;
    // End of variables declaration//GEN-END:variables
}
