/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jamesfinalproject;

import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;
import java.io.*;
import library.Library;

/**
 *
 * @author James
 */
public class EmailWindow extends javax.swing.JFrame {
    
    public boolean newUser = false;                                             //Creates a variable to track if the user is new to this feature 
    public String fileName = "";                                                //Creates a varaible to store the user's unique e-mail file name
    
    /**
     * Creates new form emailWindow
     */
    
    public EmailWindow() {
        
        initComponents();                                                       //Initializes the GUI's components
        
        String tempString = "";                                                 //Creates a temporary string variable 
        char [] usernameChars = Library.username.toCharArray();                 //Converts the user's username toa  character array
        
        for (int i = 0; i < Library.username.length(); i++) {
            tempString = tempString + (int) usernameChars[i];                   //Adds the ascii values of each character to the temporary string
        }
        
        fileName = tempString + "e.txt";                                        //Generates the filename by adding "e.txt" to the end of the temporary string
        
        try{
            
            FileReader file = new FileReader(fileName);                         //Try to read this file
            newUser = false;                                                    //If it works, this is not a new user (file has already exists)
            
        } catch (IOException e){
            newUser = true;                                                     //If it doesn't, this is a new user
        }
        
        if (newUser == false){                                                  //If they are not a new user:
            
            String[] info = Library.read(fileName);                             //Read their file (contains their username and password)
            gmailUsername.setText(info[0]);                                     //Set the text in the gmail username field equal to their username
            gmailPassword.setText(info[1]);                                     //Set the text in the gmail password field equal to their password
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        gmailUsername = new javax.swing.JTextField();
        subjectInput = new javax.swing.JTextField();
        emailRecipient = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        bodyInput = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        gmailPassword = new javax.swing.JPasswordField();
        errorText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("E-mail Sender (Gmail ONLY)  (Does not work on school wifi)");

        jLabel2.setText("Your gmail:");

        jLabel3.setText("Password:");

        jLabel4.setText("Recipient:");

        jLabel5.setText("Subject:");

        jLabel6.setText("Body:");

        bodyInput.setColumns(20);
        bodyInput.setRows(5);
        jScrollPane1.setViewportView(bodyInput);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("@gmail.com");

        errorText.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(gmailUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addComponent(subjectInput, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(29, 29, 29)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(errorText)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sendButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(backButton))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(emailRecipient)
                                        .addGap(299, 299, 299))
                                    .addComponent(gmailPassword, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jLabel1)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(gmailUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(gmailPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(emailRecipient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(subjectInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sendButton)
                        .addComponent(backButton))
                    .addComponent(errorText))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        
        boolean sent = false;                                                   //Creates a boolean variable to track if the message was sent
        boolean foundEmpty = false;                                             //Creates a boolean variable to track if one of the input fields is empty
        
        errorText.setText("");
        
        String from = gmailUsername.getText();                                  //Gets the user's gmail address
        String password = gmailPassword.getText();                              //Gets the user's gmail password 
        String[] recipients = { emailRecipient.getText() };                     //List of recipient email addresses
        String subject = subjectInput.getText();                                //Gets the email's subject
        String body = bodyInput.getText();                                      //Gets the email's body
        
        if ((from.equals(""))||(password.equals(""))||(recipients[0].equals(""))||(subject.equals(""))||(body.equals(""))){
            
            foundEmpty = true;                                                  //If one of the fields is empty, foundEmpty is true
            errorText.setText("Please fill in all fields");                     //Outputs the error message
            
        }
        
        if (foundEmpty == false){
           sent = sendFromGMail(from, password, recipients, subject, body);     //If nothing is empty, send the email
        }
        
        if (sent == true){
            errorText.setText("<html><font color='black'>Message sent</font></html>");  //Outputs the sent message to the user, with black font, if the email sends
        }
        
        if (sent == false){
            errorText.setText("Invalid username/password/recipient");           //Outputs an error message if the email did not send
        }
        
        if ((sent == true)&&(newUser == true)){
            
            String [] addData = {from, password};                               //If the email sent and this is the user's first time, stores their username and password
            Library.write(fileName, addData, false);                            //Writes their informatoin to the data file
            
        }
    
    }//GEN-LAST:event_sendButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        
        this.dispose();                                                         //Closes this window
        
    }//GEN-LAST:event_backButtonActionPerformed
    
    public static boolean sendFromGMail(String from, String pass, String[] to, String subject, String body) {
        
        /**
         * This code has been adapted from that of Bill the Lizard, available here:
         * https://stackoverflow.com/questions/46663/how-can-i-send-an-email-by-java-application-using-gmail-yahoo-or-hotmail
         */
        
        boolean sent = true;
        
        Properties props = System.getProperties();
        String host = "smtp.gmail.com";
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.user", from);
        props.put("mail.smtp.password", pass);
        props.put("mail.smtp.port", "587");
        props.put("mail.smtp.auth", "true");

        Session session = Session.getDefaultInstance(props);
        MimeMessage message = new MimeMessage(session);

        try {
            message.setFrom(new InternetAddress(from));
            InternetAddress[] toAddress = new InternetAddress[to.length];

            // To get the array of addresses
            for( int i = 0; i < to.length; i++ ) {
                toAddress[i] = new InternetAddress(to[i]);
            }

            for (InternetAddress toAddress1 : toAddress) {
                message.addRecipient(Message.RecipientType.TO, toAddress1);
            }
 
            message.setSubject(subject);
            message.setText(body);
            
            Transport transport = session.getTransport("smtp");
            transport.connect(host, from, pass);
            transport.sendMessage(message, message.getAllRecipients());
            transport.close();
        }
        catch (AddressException ae) {
            sent = false;
        }
        catch (MessagingException me) {
            sent = false;
        }
        
        return sent;
        
    }
    
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTextArea bodyInput;
    private javax.swing.JTextField emailRecipient;
    private javax.swing.JLabel errorText;
    private javax.swing.JPasswordField gmailPassword;
    private javax.swing.JTextField gmailUsername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField subjectInput;
    // End of variables declaration//GEN-END:variables
}
